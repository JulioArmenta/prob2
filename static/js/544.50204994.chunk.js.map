{"version":3,"file":"static/js/544.50204994.chunk.js","mappings":"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","sources":["actions/customers.js","views/catalogs/customers/CustomerForm.js","views/catalogs/customers/CustomersGrid.js","views/catalogs/customers/Customers.js","../node_modules/@mui/icons-material/CalendarMonth.js"],"sourcesContent":["import axios from 'axios'\r\nimport moment from 'moment'\r\nimport { types } from '../types/types'\r\n\r\nexport const getAllCustomers = () => {\r\n  return (dispatch) => {\r\n    axios\r\n      .get(`${process.env.REACT_APP_API_URL_BASE}/api/customers`)\r\n      .then((response) => {\r\n        console.log(response)\r\n\r\n        dispatch(getCustomers(response.data))\r\n      })\r\n      .catch((error) => {\r\n        console.log(error)\r\n      })\r\n  }\r\n}\r\n\r\nexport const addCustomerAPI = (customer) => {\r\n  return async (dispatch) => {\r\n    await axios\r\n      .post(`${process.env.REACT_APP_API_URL_BASE}/api/customers`, customer)\r\n      .then((response) => {\r\n        dispatch(createCustomer(response.data))\r\n      })\r\n      .catch((error) => {\r\n        console.log(error)\r\n      })\r\n  }\r\n}\r\n\r\nexport const updateCustomerAPI = (customer, id) => {\r\n  return async (dispatch) => {\r\n    await axios\r\n      .put(`${process.env.REACT_APP_API_URL_BASE}/api/customers/${id}`, customer)\r\n      .then((response) => {\r\n        dispatch(updateCustomer(customer))\r\n      })\r\n      .catch((error) => {\r\n        console.log(error)\r\n      })\r\n  }\r\n}\r\n\r\n// export const changeStatusCustomerAPI = (customer, id) => {\r\n//   return async (dispatch) => {\r\n//     await axios\r\n//       .put(`${process.env.REACT_APP_API_URL_BASE}/api/customers/${id}`, {\r\n//         status: !customer.status,\r\n//       })\r\n//       .then((response) => {\r\n//         dispatch(updateCustomer({ status: !customer.status, id: customer.id }))\r\n//       })\r\n//       .catch((error) => {\r\n//         console.log(error)\r\n//       })\r\n//   }\r\n// }\r\n\r\nexport const createCustomer = (customer) => ({\r\n  type: types.createCustomer,\r\n  payload: customer,\r\n})\r\n\r\nexport const updateCustomer = (customer) => ({\r\n  type: types.updateCustomer,\r\n  payload: customer,\r\n})\r\n\r\n// export const changeStatusCustomer = (customer) => ({\r\n//   type: types.changeStatusCustomer,\r\n//   payload: customer,\r\n// })\r\n\r\nexport const getCustomers = (customers) => ({\r\n  type: types.getCustomers,\r\n  payload: customers,\r\n})\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Grid } from '@material-ui/core'\r\nimport { useForm as customForm, Form } from 'src/layout/useForm'\r\nimport Controls from 'src/views/utils/controls/Controls'\r\n// import { FormRadioGroup } from 'src/views/utils/controls/FormRadioGroup'\r\n\r\nconst genderItems = [\r\n  { id: 'male', title: 'Male' },\r\n  { id: 'female', title: 'Female' },\r\n  { id: 'other', title: 'Other' },\r\n]\r\n\r\nconst initialFValues = {\r\n  id: 0,\r\n  name: '',\r\n  lastname: '',\r\n  birth_date: new Date(),\r\n  email: '',\r\n  phone: '',\r\n  // gender: 'male',\r\n}\r\n\r\nexport const CustomerForm = (props) => {\r\n  const { recordForEdit, addOrEdit, cancelForm } = props\r\n\r\n  const { values, setValues, handleInputChange, resetForm } = customForm(initialFValues)\r\n\r\n  useEffect(() => {\r\n    if (recordForEdit != null) {\r\n      console.log(recordForEdit)\r\n      if (recordForEdit.id) setValues({ ...recordForEdit })\r\n    }\r\n  }, [recordForEdit])\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    addOrEdit(values, resetForm)\r\n  }\r\n\r\n  const handleReset = () => {\r\n    resetForm()\r\n  }\r\n\r\n  const handleCancel = () => {\r\n    cancelForm(resetForm)\r\n  }\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <Grid container>\r\n        <Grid item xs={12}>\r\n          <Controls.FormInput\r\n            label=\"Nombre\"\r\n            name=\"name\"\r\n            value={values.name}\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n          <Controls.FormInput\r\n            label=\"Apellido(s)\"\r\n            name=\"lastname\"\r\n            value={values.lastname}\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n          <Controls.FormInput\r\n            label=\"Correo electronico\"\r\n            name=\"email\"\r\n            value={values.email}\r\n            onChange={handleInputChange}\r\n            validators={['isEmail']}\r\n            errorMessages={['Ingresar email válido']}\r\n          />\r\n          <Controls.FormInput\r\n            label=\"Teléfono\"\r\n            name=\"phone\"\r\n            value={values.phone}\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n          <Controls.FormDatePicker\r\n            name=\"birth_date\"\r\n            label=\"Fecha de nacimiento\"\r\n            value={values.birth_date}\r\n            onChange={handleInputChange}\r\n            required\r\n          />\r\n          {/* <Controls.FormRadioGroup\r\n            name=\"gender\"\r\n            label=\"Género\"\r\n            value={values.gender}\r\n            onChange={handleInputChange}\r\n            items={genderItems}\r\n          /> */}\r\n        </Grid>\r\n        <Grid item xs={12} style={{ textAlign: 'right', paddingTop: 5 }}>\r\n          <Controls.FormButton\r\n            variant=\"text\"\r\n            color=\"default\"\r\n            size=\"large\"\r\n            text=\"Cancelar\"\r\n            onClick={handleCancel}\r\n          />\r\n          <Controls.FormButton\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            type=\"submit\"\r\n            size=\"large\"\r\n            text=\"Guardar\"\r\n          />\r\n          {/* <Controls.FormButton\r\n            variant=\"contained\"\r\n            color=\"default\"\r\n            size=\"large\"\r\n            text=\"Limpiar\"\r\n            onClick={handleReset}\r\n          /> */}\r\n        </Grid>\r\n      </Grid>\r\n    </Form>\r\n  )\r\n}\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport MaterialTable, { MTableAction, MTableBodyRow } from 'material-table'\r\nimport LocalPhoneIcon from '@mui/icons-material/LocalPhone'\r\nimport EmailIcon from '@mui/icons-material/Email'\r\nimport CalendarMonthIcon from '@mui/icons-material/CalendarMonth'\r\nimport CalendarTodayIcon from '@mui/icons-material/CalendarToday'\r\nimport PersonIcon from '@mui/icons-material/Person'\r\nimport PersonAddAltIcon from '@mui/icons-material/PersonAddAlt'\r\nimport { Spinner } from 'src/views/utils/Spinner'\r\nimport { PaperHeader } from 'src/views/utils/PaperHeader'\r\nimport { GridTitle } from 'src/views/utils/material-table/GridTitle'\r\nimport { localizationConfig } from '../../utils/material-table/Localization'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { changeStatusCustomerAPI, getAllCustomers, updateCustomerAPI } from 'src/actions/customers'\r\nimport moment from 'moment'\r\nimport { tableIcons } from 'src/views/utils/material-table/GridIcons'\r\nimport { headerStyle } from 'src/views/utils/material-table/GridHeaderStyle'\r\nimport components from 'src/views/utils/material-table/GridComponents'\r\nimport ActionsTemplate from 'src/views/utils/material-table/GridActions'\r\nimport Edit from '@material-ui/icons/Edit'\r\nimport LockOpenIcon from '@mui/icons-material/LockOpen'\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined'\r\nimport rowStyle from 'src/views/utils/material-table/GridRowStyle'\r\nconst CustomersGrid = (props) => {\r\n  // let [columns] = useState([\r\n  //   {\r\n  //     title: <GridTitle Icon={PersonIcon} title=\"Nombre\" />,\r\n  //     field: 'name',\r\n  //   },\r\n\r\n  //   {\r\n  //     title: <GridTitle Icon={PersonAddAltIcon} title=\"Apellidos\" />,\r\n  //     field: 'lastname',\r\n  //   },\r\n  //   {\r\n  //     title: <GridTitle Icon={LocalPhoneIcon} title=\"Telefono\" />,\r\n  //     field: 'phone',\r\n  //   },\r\n  //   {\r\n  //     // title: 'Correo Electronico',\r\n  //     title: <GridTitle Icon={EmailIcon} title=\"Correo Electronico\" />,\r\n  //     field: 'email',\r\n  //   },\r\n  //   {\r\n  //     title: <GridTitle Icon={CalendarMonthIcon} title=\"Edad\" />,\r\n  //     field: 'birth_date',\r\n  //     render: (rowData) => getfullYear(rowData.birth_date),\r\n  //   },\r\n  //   {\r\n  //     // title: 'Correo Electronico',\r\n  //     title: <GridTitle Icon={CalendarTodayIcon} title=\"Fecha de registro\" />,\r\n  //     field: 'createdAt',\r\n  //     type: 'date',\r\n  //     defaultSort: 'desc',\r\n  //     render: (rowData) => moment(rowData.createdAt).format('DD/MM/YYYY'),\r\n  //   },\r\n  // ])\r\n  const columnas = [\r\n    {\r\n      title: <GridTitle Icon={PersonIcon} title=\"Nombre\" />,\r\n      field: 'name',\r\n    },\r\n\r\n    {\r\n      title: <GridTitle Icon={PersonAddAltIcon} title=\"Apellidos\" />,\r\n      field: 'lastname',\r\n    },\r\n    {\r\n      title: <GridTitle Icon={LocalPhoneIcon} title=\"Telefono\" />,\r\n      field: 'phone',\r\n    },\r\n    {\r\n      // title: 'Correo Electronico',\r\n      title: <GridTitle Icon={EmailIcon} title=\"Correo Electronico\" />,\r\n      field: 'email',\r\n    },\r\n    {\r\n      title: <GridTitle Icon={CalendarMonthIcon} title=\"Edad\" />,\r\n      field: 'birth_date',\r\n      render: (rowData) => getfullYear(rowData.birth_date),\r\n    },\r\n    {\r\n      // title: 'Correo Electronico',\r\n      title: <GridTitle Icon={CalendarTodayIcon} title=\"Fecha de registro\" />,\r\n      field: 'createdAt',\r\n      type: 'date',\r\n      defaultSort: 'desc',\r\n      render: (rowData) => moment(rowData.createdAt).format('DD/MM/YYYY'),\r\n    },\r\n  ]\r\n\r\n  const getfullYear = (birth_date) => {\r\n    if (birth_date != null) {\r\n      let hoy = new Date()\r\n      let fechaNacimiento = new Date(birth_date)\r\n      let edad = hoy.getFullYear() - fechaNacimiento.getFullYear()\r\n      let diferenciaMeses = hoy.getMonth() - fechaNacimiento.getMonth()\r\n      if (\r\n        diferenciaMeses < 0 ||\r\n        (diferenciaMeses === 0 && hoy.getDate() < fechaNacimiento.getDate())\r\n      ) {\r\n        edad--\r\n      }\r\n      return edad\r\n    } else return null\r\n  }\r\n\r\n  const { setOpenPopup, setRecordForEdit } = props\r\n\r\n  const dispatch = useDispatch()\r\n  const customers = useSelector((state) => state.customers)\r\n\r\n  useEffect(() => {\r\n    if (customers.length === 0) {\r\n      dispatch(getAllCustomers())\r\n    }\r\n  }, [])\r\n\r\n  return useMemo(\r\n    () => (\r\n      <>\r\n        {customers != null ? (\r\n          // <CCard>\r\n          <>\r\n            <PaperHeader title=\"Pacientes\" />\r\n            <MaterialTable\r\n              localization={localizationConfig}\r\n              icons={tableIcons}\r\n              columns={columnas}\r\n              data={customers}\r\n              actions={ActionsTemplate(\r\n                'Editar paciente',\r\n                updateCustomerAPI,\r\n                setOpenPopup,\r\n                setRecordForEdit,\r\n                dispatch,\r\n              )}\r\n              // actions={[\r\n              //   {\r\n              //     icon: 'save',\r\n              //     tooltip: 'Save User',\r\n              //     onClick: (event, rowData) => setOpenPopup(true),\r\n              //     isFreeAction: true,\r\n              //   },\r\n              //   {\r\n              //     icon: () => <Edit style={{ color: '#1380C7' }} />,\r\n              //     tooltip: 'Editar paciente',\r\n              //     onClick: (event, rowData) => {\r\n              //       setOpenPopup(true)\r\n              //       setRecordForEdit(rowData)\r\n              //     },\r\n              //   },\r\n              //   (rowData) => ({\r\n              //     icon: () =>\r\n              //       rowData.status ? (\r\n              //         <LockOutlinedIcon style={{ color: '#1380C7' }} />\r\n              //       ) : (\r\n              //         <LockOpenIcon style={{ color: '#1380C7' }} />\r\n              //       ),\r\n              //     tooltip: rowData.status ? 'Inactivar' : 'Activar',\r\n              //     onClick: (event, rowData) => {\r\n              //       console.log(rowData)\r\n              //       dispatch(changeStatusCustomerAPI(rowData, rowData.id))\r\n              //     },\r\n              //   }),\r\n              // ]}\r\n              components={components(setOpenPopup, setRecordForEdit)}\r\n              options={{\r\n                search: true,\r\n                draggable: false,\r\n                showTitle: false,\r\n                thirdSortClick: false,\r\n                searchFieldAlignment: 'left',\r\n                actionsColumnIndex: -1,\r\n                searchFieldVariant: 'outlined',\r\n                searchFieldStyle: { margin: 15 },\r\n                headerStyle: headerStyle,\r\n                rowStyle: rowStyle,\r\n              }}\r\n            />\r\n          </>\r\n        ) : (\r\n          <Spinner />\r\n        )}\r\n      </>\r\n    ),\r\n    [customers],\r\n  )\r\n}\r\n\r\nexport default CustomersGrid\r\n","import { Paper, makeStyles } from '@material-ui/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { addCustomerAPI, updateCustomerAPI } from 'src/actions/customers'\r\nimport { PopupForm } from 'src/views/utils/controls/PopupForm'\r\nimport { CustomerForm } from './CustomerForm'\r\nimport CustomersGrid from './CustomersGrid'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  pageContent: {\r\n    margin: theme.spacing(3),\r\n    padding: theme.spacing(3),\r\n  },\r\n  searchInput: {\r\n    width: '75%',\r\n  },\r\n}))\r\n\r\nconst Customers = () => {\r\n  const dispatch = useDispatch()\r\n  const [openPopup, setOpenPopup] = useState(false)\r\n  const [recordForEdit, setRecordForEdit] = useState(null)\r\n  const classes = useStyles()\r\n\r\n  const addOrEdit = (customer, resetForm) => {\r\n    if (customer.id === 0) {\r\n      delete customer.id\r\n      dispatch(addCustomerAPI(customer))\r\n    } else {\r\n      delete customer.tableData\r\n      dispatch(updateCustomerAPI(customer, customer.id))\r\n    }\r\n\r\n    resetForm()\r\n    setRecordForEdit(null)\r\n    setOpenPopup(false)\r\n  }\r\n\r\n  const cancelForm = (resetForm) => {\r\n    resetForm()\r\n    setRecordForEdit(null)\r\n    setOpenPopup(false)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Paper>\r\n        <CustomersGrid setOpenPopup={setOpenPopup} setRecordForEdit={setRecordForEdit} />\r\n      </Paper>\r\n      <PopupForm\r\n        openPopup={openPopup}\r\n        setOpenPopup={setOpenPopup}\r\n        setRecordForEdit={setRecordForEdit}\r\n        title=\"Paciente\"\r\n      >\r\n        <CustomerForm recordForEdit={recordForEdit} addOrEdit={addOrEdit} cancelForm={cancelForm} />\r\n      </PopupForm>\r\n    </>\r\n  )\r\n}\r\nexport default Customers\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 4h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V10h14v10zM9 14H7v-2h2v2zm4 0h-2v-2h2v2zm4 0h-2v-2h2v2zm-8 4H7v-2h2v2zm4 0h-2v-2h2v2zm4 0h-2v-2h2v2z\"\n}), 'CalendarMonth');\n\nexports.default = _default;"],"names":["getAllCustomers","dispatch","axios","process","then","response","console","log","getCustomers","data","catch","error","addCustomerAPI","customer","createCustomer","updateCustomerAPI","id","updateCustomer","type","types","payload","customers","initialFValues","name","lastname","birth_date","Date","email","phone","CustomerForm","props","recordForEdit","addOrEdit","cancelForm","customForm","values","setValues","handleInputChange","resetForm","useEffect","onSubmit","e","preventDefault","Grid","container","item","xs","Controls","label","value","onChange","required","validators","errorMessages","style","textAlign","paddingTop","variant","color","size","text","onClick","columnas","title","GridTitle","Icon","PersonIcon","field","PersonAddAltIcon","LocalPhoneIcon","EmailIcon","CalendarMonthIcon","render","rowData","getfullYear","CalendarTodayIcon","defaultSort","moment","createdAt","format","hoy","fechaNacimiento","edad","getFullYear","diferenciaMeses","getMonth","getDate","setOpenPopup","setRecordForEdit","useDispatch","useSelector","state","length","useMemo","PaperHeader","localization","localizationConfig","icons","tableIcons","columns","actions","ActionsTemplate","components","options","search","draggable","showTitle","thirdSortClick","searchFieldAlignment","actionsColumnIndex","searchFieldVariant","searchFieldStyle","margin","headerStyle","rowStyle","Spinner","useStyles","makeStyles","theme","pageContent","spacing","padding","searchInput","width","useState","openPopup","Paper","PopupForm","tableData","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}